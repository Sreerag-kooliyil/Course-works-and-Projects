{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPElHUwbcwHBkz6DbeiBEoE",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Sreerag-kooliyil/Course-works-and-Projects/blob/main/Dynamic_Job_Shop_Scheduling.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\"\"\"\n",
        "This program simulates a **Dynamic Job Shop Scheduling Problem (DJSSP)**, where multiple jobs arrive at different times and follow different sequences through a set of machines.\n",
        "Each job has a unique machine sequence and specific processing times on each machine. The objective is to simulate real-time scheduling and evaluate system performance.\n",
        "\n",
        "ðŸ”¹ Input Format (Excel/CSV):\n",
        "- Create a CSV file with the following columns:\n",
        "    'Job name', 'Arrival time', 'Due time',\n",
        "    '1st machine', '2nd machine', '3rd machine',\n",
        "    'M1 Processing time', 'M2 Processing time', 'M3 Processing time'\n",
        "\n",
        "- Example machine names in the sequence: M1, M2, M3 (case-sensitive)\n",
        "- Ensure machine sequence columns (1st/2nd/3rd machine) follow \"M1\", \"M2\", etc., for correct parsing.\n",
        "\n",
        "ðŸ”¹ Scheduling Rules:\n",
        "- Each machine uses a specific **priority rule** to select jobs:\n",
        "    â–ª Machine 1: Shortest Processing Time (SPT)\n",
        "    â–ª Machine 2: Longest Processing Time (LPT)\n",
        "    â–ª Machine 3: First Come First Served (FCFS)\n",
        "- These rules can be **modified** in the `Scheduler` class by changing the values passed when initializing each `Machine`.\n",
        "\n",
        "The simulation outputs each machineâ€™s job execution timeline and key performance metrics like Average Flow Time, Number of Late Jobs, and Makespan.\n",
        "\"\"\"\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from google.colab import files\n",
        "from collections import deque\n",
        "\n",
        "class Job:\n",
        "    def __init__(self, name, arrival_time, due_time, machine_sequence, processing_times):\n",
        "        self.name = name\n",
        "        self.arrival_time = arrival_time\n",
        "        self.due_time = due_time\n",
        "        self.machine_sequence = machine_sequence\n",
        "        self.processing_times = processing_times\n",
        "        self.current_machine_index = 0\n",
        "        self.completion_time = 0\n",
        "        self.start_times = {0: 0, 1: 0, 2: 0}\n",
        "        self.finish_times = {0: 0, 1: 0, 2: 0}\n",
        "\n",
        "    ''' The job class represents a single job in the scheduling system. It stores information such as Job name, Arrival time, Due time, Sequence of machines to visit,\n",
        "    Processing time for each job in each machine, Current progress, Completion time, Start and Finish times for each job in each machine '''\n",
        "\n",
        "class Machine:\n",
        "    def __init__(self, name, priority_rule):\n",
        "        self.name = name\n",
        "        self.priority_rule = priority_rule\n",
        "        self.queue = []\n",
        "        self.current_job = None\n",
        "        self.current_time = 0\n",
        "\n",
        "    ''' The machine class represents a single machine in the system. It has methods to add jobs to its queue & select the next job to process based on a\n",
        "    priority rule (SPT, LPT, or FCFS) '''\n",
        "\n",
        "    def add_job(self, job):\n",
        "        self.queue.append(job)\n",
        "\n",
        "    def select_next_job(self, current_time):\n",
        "        available_jobs = [job for job in self.queue if job.arrival_time <= current_time]\n",
        "        if not available_jobs:\n",
        "            return None\n",
        "        if self.priority_rule == \"SPT\": #SPT(Shortest Processing Time)\n",
        "            return min(available_jobs, key=lambda x: x.processing_times[self.name])\n",
        "        elif self.priority_rule == \"LPT\": #LPT(Longest Processing Time)\n",
        "            return max(available_jobs, key=lambda x: x.processing_times[self.name])\n",
        "        else:  # FCFS(First Come, First Served)\n",
        "            return min(available_jobs, key=lambda x: x.arrival_time)\n",
        "\n",
        "class Scheduler:\n",
        "    def __init__(self):\n",
        "        self.jobs = []\n",
        "        self.machines = {\n",
        "            0: Machine(0, \"SPT\"),\n",
        "            1: Machine(1, \"LPT\"),\n",
        "            2: Machine(2, \"FCFS\")\n",
        "        }\n",
        "        '''The priority rules are SPT(Shortest Processing Time), LPT(Longest Processing Time) & FCFS(First Come, First Served). The priority rules for each machine\n",
        "        can be changed above by interchanging the SPT, LPT or FCFS'''\n",
        "        self.current_time = 0\n",
        "        self.completed_jobs = []\n",
        "    # The Scheduler class manages the entire scheduling process.\n",
        "\n",
        "    def add_job(self, job):\n",
        "        self.jobs.append(job)\n",
        "\n",
        "    def run(self):\n",
        "        while self.jobs or any(machine.current_job or machine.queue for machine in self.machines.values()):\n",
        "            for job in self.jobs[:]:\n",
        "                if job.arrival_time <= self.current_time:\n",
        "                    first_machine = job.machine_sequence[0]\n",
        "                    self.machines[first_machine].add_job(job)\n",
        "                    self.jobs.remove(job)\n",
        "\n",
        "            next_event_time = float('inf')\n",
        "\n",
        "            for machine in self.machines.values():\n",
        "                if not machine.current_job:\n",
        "                    machine.current_job = machine.select_next_job(self.current_time)\n",
        "                    if machine.current_job:\n",
        "                        machine.queue.remove(machine.current_job)\n",
        "                        prev_machine = machine.current_job.machine_sequence[machine.current_job.current_machine_index - 1] if machine.current_job.current_machine_index > 0 else None\n",
        "                        prev_finish_time = machine.current_job.finish_times[prev_machine] if prev_machine is not None else machine.current_job.arrival_time\n",
        "                        start_time = max(self.current_time, prev_finish_time)\n",
        "                        machine.current_job.start_times[machine.name] = start_time\n",
        "                        machine.current_job.finish_times[machine.name] = start_time + machine.current_job.processing_times[machine.name]\n",
        "                        next_event_time = min(next_event_time, machine.current_job.finish_times[machine.name])\n",
        "\n",
        "                if machine.current_job:\n",
        "                    next_event_time = min(next_event_time, machine.current_job.finish_times[machine.name])\n",
        "                    if self.current_time >= machine.current_job.finish_times[machine.name]:\n",
        "                        job = machine.current_job\n",
        "                        job.current_machine_index += 1\n",
        "                        if job.current_machine_index < len(job.machine_sequence):\n",
        "                            next_machine = job.machine_sequence[job.current_machine_index]\n",
        "                            self.machines[next_machine].add_job(job)\n",
        "                        else:\n",
        "                            job.completion_time = machine.current_job.finish_times[machine.name]\n",
        "                            self.completed_jobs.append(job)\n",
        "                        machine.current_job = None\n",
        "\n",
        "            if self.jobs:\n",
        "                next_arrival = min(job.arrival_time for job in self.jobs)\n",
        "                next_event_time = min(next_event_time, next_arrival)\n",
        "\n",
        "            if next_event_time == float('inf'):\n",
        "                break\n",
        "\n",
        "            self.current_time = next_event_time\n",
        "\n",
        "            '''The loop: Checks for new arrived jobs and adds them to the appropriate machine queues,\n",
        "                        Processes current jobs on machines\n",
        "                        Moves completed jobs to the next machine or marks them as finished\n",
        "                        Updates the current time to the next event (job arrival or job completion)'''\n",
        "\n",
        "    def calculate_metrics(self):\n",
        "        if not self.completed_jobs:\n",
        "            return {\n",
        "                \"Average Flow Time\": 0,\n",
        "                \"Average Jobs in System\": 0,\n",
        "                \"Number of Late Jobs\": 0,\n",
        "                \"Average Lateness\": 0,\n",
        "                \"Total Flow Time\": 0,\n",
        "                \"Makespan\": 0\n",
        "            }\n",
        "\n",
        "        total_flow_time = sum(job.completion_time - job.arrival_time for job in self.completed_jobs)\n",
        "        avg_flow_time = total_flow_time / len(self.completed_jobs)\n",
        "\n",
        "        makespan = max(job.completion_time for job in self.completed_jobs)\n",
        "        avg_jobs_in_system = total_flow_time / makespan\n",
        "\n",
        "        late_jobs = sum(1 for job in self.completed_jobs if job.completion_time > job.due_time)\n",
        "\n",
        "        total_lateness = sum(max(0, job.completion_time - job.due_time) for job in self.completed_jobs)\n",
        "        avg_lateness = total_lateness / len(self.completed_jobs)\n",
        "\n",
        "        return {\n",
        "            \"Average Flow Time\": avg_flow_time,\n",
        "            \"Average Jobs in System\": avg_jobs_in_system,\n",
        "            \"Number of Late Jobs\": late_jobs,\n",
        "            \"Average Lateness\": avg_lateness,\n",
        "            \"Total Flow Time\": total_flow_time,\n",
        "            \"Makespan\": makespan\n",
        "        }\n",
        "\n",
        "    def print_machine_sequences(self):\n",
        "        for machine_id, machine in self.machines.items():\n",
        "            print(f\"Machine {machine_id + 1} sequence:\")\n",
        "            sorted_jobs = sorted(self.completed_jobs, key=lambda job: job.start_times[machine_id])\n",
        "            for job in sorted_jobs:\n",
        "                if machine_id in job.machine_sequence:\n",
        "                    start_time = job.start_times[machine_id]\n",
        "                    finish_time = job.finish_times[machine_id]\n",
        "                    print(f\"  {job.name} (Start: {start_time}, Finish: {finish_time})\")\n",
        "\n",
        "def read_csv_data(file_path):\n",
        "    df = pd.read_csv(file_path)\n",
        "    jobs = []\n",
        "    for _, row in df.iterrows():\n",
        "        name = row['Job name']\n",
        "        arrival_time = row['Arrival time']\n",
        "        due_time = row['Due time']\n",
        "        machine_sequence = [int(m[1:]) - 1 for m in [row['1 machine'], row['2 machine'], row['3 machine']]]\n",
        "        processing_times = {0: row['M1 Processing time'], 1: row['M2 Processing time'], 2: row['M3 Processing time']}\n",
        "        jobs.append(Job(name, arrival_time, due_time, machine_sequence, processing_times))\n",
        "    return jobs\n",
        "\n",
        "def main():\n",
        "    print(\"Please upload the CSV file:\")\n",
        "    uploaded = files.upload()\n",
        "\n",
        "    file_path = next(iter(uploaded))\n",
        "\n",
        "    try:\n",
        "        jobs = read_csv_data(file_path)\n",
        "    except FileNotFoundError:\n",
        "        print(f\"Error: The file '{file_path}' was not found.\")\n",
        "        return\n",
        "    except pd.errors.EmptyDataError:\n",
        "        print(f\"Error: The file '{file_path}' is empty.\")\n",
        "        return\n",
        "    except Exception as e:\n",
        "        print(f\"An error occurred while reading the file: {str(e)}\")\n",
        "        return\n",
        "\n",
        "    if not jobs:\n",
        "        print(\"No jobs were found in the input file.\")\n",
        "        return\n",
        "\n",
        "    scheduler = Scheduler()\n",
        "    for job in jobs:\n",
        "        scheduler.add_job(job)\n",
        "\n",
        "    scheduler.run()\n",
        "    scheduler.print_machine_sequences()\n",
        "    metrics = scheduler.calculate_metrics()\n",
        "\n",
        "    print(\"\\nPerformance Metrics:\")\n",
        "    for metric, value in metrics.items():\n",
        "        print(f\"{metric}: {value:.2f}\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        },
        "id": "5BDv8-avZI-9",
        "outputId": "368ef088-bc6d-4c8e-a35e-9cabf037ea1a"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Please upload the CSV file:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-0c24271d-1d36-4bf5-b728-de6c1b77df5e\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-0c24271d-1d36-4bf5-b728-de6c1b77df5e\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving Case1.csv to Case1 (2).csv\n",
            "Machine 1 sequence:\n",
            "  J4 (Start: 0, Finish: 10)\n",
            "  J3 (Start: 10, Finish: 19)\n",
            "  J1 (Start: 19, Finish: 31)\n",
            "  J2 (Start: 33, Finish: 42)\n",
            "Machine 2 sequence:\n",
            "  J3 (Start: 0, Finish: 10)\n",
            "  J4 (Start: 10, Finish: 25)\n",
            "  J2 (Start: 25, Finish: 33)\n",
            "  J1 (Start: 33, Finish: 43)\n",
            "Machine 3 sequence:\n",
            "  J3 (Start: 19, Finish: 25)\n",
            "  J4 (Start: 25, Finish: 42)\n",
            "  J2 (Start: 42, Finish: 57)\n",
            "  J1 (Start: 57, Finish: 69)\n",
            "\n",
            "Performance Metrics:\n",
            "Average Flow Time: 48.25\n",
            "Average Jobs in System: 2.80\n",
            "Number of Late Jobs: 0.00\n",
            "Average Lateness: 0.00\n",
            "Total Flow Time: 193.00\n",
            "Makespan: 69.00\n"
          ]
        }
      ]
    }
  ]
}
