{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMAUJA29ZMoO9ZblX8q4uxs",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Sreerag-kooliyil/Course-works-and-Projects/blob/main/Travelling_salesman_problem.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# --------------------------------------------------------------------------------------\n",
        "# Problem Description:\n",
        "# This code is developed to solve logistics optimization tasks for DC’s supply chain.\n",
        "# The context involves a supervisor who visits 21 showrooms daily, gathers inventory data,\n",
        "# and returns to the Head Office (HO) to place delivery orders from three warehouses (W1, W2, W3).\n",
        "#\n",
        "# The assignment consists of two parts:\n",
        "#\n",
        "# 1. **Routing Optimization (Problem 1):**\n",
        "#    - Determine the number of unique routes for visiting all showrooms ending at HO.\n",
        "#    - Compute the shortest possible route distances under various constraints:\n",
        "#        a) Ending at HO without starting there.\n",
        "#        b) Starting and ending at HO.\n",
        "#    - Calculate distance savings between the above two scenarios.\n",
        "#\n",
        "# 2. **Vehicle Routing and Warehouse Assignment (Problem 2):**\n",
        "#    - Classify showroom locations into geographic zones (NE, SE, NW, SW).\n",
        "#    - Assign each warehouse to the most suitable zone.\n",
        "#    - Based on delivery order quantities, compute:\n",
        "#        a) Number of trucks required (capacity: 50 units/truck).\n",
        "#        b) Total distance traveled by trucks from a warehouse.\n",
        "#        c) Delivery cost considering Rs. 5000 fixed + Rs. 40/km variable per truck.\n",
        "#\n",
        "# The objective is to minimize travel distance and delivery cost while satisfying demand at each location.\n",
        "# --------------------------------------------------------------------------------------\n"
      ],
      "metadata": {
        "id": "op1OsRWKT6ml"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#this is the code for plotting the locations (showrooms and warehouses) based on their coordinates given\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Sample Data given as coordinates (replace with your actual data)\n",
        "x_coords = [-3, -1, 5, 8, 7, 9, -3, -3, 4, 4, 2, 6, -4, 5, -5, -2, 2, 7, 3, 8, -4, 6, 4, 0] #x-coordinate\n",
        "y_coords = [-2, -5, 6, 2, 11, 14, 15, -6, 8, -8, -14, -10, 8, -12, -7, 5, 15, 12, -15, -10, -15, 15, -20, 0] #y-coordinate\n",
        "order_qty = [9, 20, 20, 23, 23, 26, 30, 12, 20, 23, 14, 26, 8, 10, 19, 11, 9, 10, 14, 16, 5, 0, 0, 0] #order quantities of each location\n",
        "\n",
        "# Create labels in the desired format\n",
        "labels = [f\"S{i+1}({qty})\" for i, qty in enumerate(order_qty[:21])]  # S1 to S21\n",
        "labels.extend([f\"W{i+1}({qty})\" for i, qty in enumerate(order_qty[21:])])  # W1 to W3\n",
        "\n",
        "# Create the scatter plot\n",
        "plt.scatter(x_coords, y_coords, s=order_qty)  # 's' controls size\n",
        "\n",
        "# Add labels to each point\n",
        "for i in range(len(x_coords)):\n",
        "    plt.annotate(labels[i], (x_coords[i], y_coords[i]), textcoords=\"offset points\", xytext=(0, 10), ha='center')\n",
        "\n",
        "# Customize the plot (add titles, labels, etc.)\n",
        "plt.xlabel(\"X Coordinate\")\n",
        "plt.ylabel(\"Y Coordinate\")\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 457
        },
        "id": "v2PdjuFg6aIa",
        "outputId": "c600fa83-7714-438d-ced9-56df6c062a44"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "T4MYLhrjgadR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#this is the code for inputting data on distance, orderquantity, locations\n",
        "import pandas as pd\n",
        "\n",
        "pd.set_option('display.max_rows', None)\n",
        "pd.set_option('display.max_columns', None)\n",
        "\n",
        "# Read the CSV file into a DataFrame\n",
        "t1 = pd.read_excel('table1.xlsx')\n",
        "\n",
        "# Rename the first column header to `To`\n",
        "t1 = t1.rename(columns={'Unnamed: 0': 'To'})\n",
        "\n",
        "# Set first column `To` as the index\n",
        "t1 = t1.set_index('To')\n",
        "\n",
        "# Create a dictionary where keys are the column headers, and values are dictionaries of the corresponding row values\n",
        "distance = t1.to_dict(orient='index')\n",
        "\n",
        "t2 = pd.read_excel('table2.xlsx')\n",
        "\n",
        "order_quantity = dict(zip(t2['Location'], t2['Order quantity']))\n",
        "\n",
        "locations = ['S1 ', 'S2 ', 'S3 ', 'S4 ', 'S5 ', 'S6 ', 'S7 ', 'S8 ', 'S9 ', 'S10 ', 'S11 ', 'S12 ', 'S13 ', 'S14 ', 'S15 ', 'S16 ', 'S17 ', 'S18 ', 'S19 ', 'S20 ', 'S21 ', 'HO ','W1','W2','W3']"
      ],
      "metadata": {
        "id": "oxcD98U1FHCf"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#run this code only if pulp library is not installed in your python platform\n",
        "!pip install pulp"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sg9uC56g08Vp",
        "outputId": "c412d1fc-4ed1-49db-ef44-7938ded50d16"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pulp in /usr/local/lib/python3.11/dist-packages (3.1.1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\"\"\"\n",
        "Problem Context - TSP Without Head Office Involvement:\n",
        "\n",
        "This section addresses the scenario where the supervisor starts at any showroom,\n",
        "visits all other showrooms exactly once, and finally returns to the starting showroom\n",
        "to place the final order. The Head Office (HO) is not involved in this routing plan.\n",
        "\n",
        "Objective:\n",
        "To determine the minimum possible distance required to complete a full loop\n",
        "(starting and ending at the same showroom) while visiting all 21 showrooms exactly once.\n",
        "\n",
        "This is a classic instance of the Traveling Salesman Problem (TSP),\n",
        "and the goal is to compute the shortest possible circular route covering all locations.\n",
        "\"\"\"\n",
        "\n",
        "import pulp\n",
        "import numpy as np\n",
        "from itertools import combinations\n",
        "\n",
        "def solve_tsp_exact(distance_dict):\n",
        "    # Get store locations\n",
        "    stores = [loc for loc in distance_dict.keys() if loc.startswith('S')]\n",
        "    n = len(stores)\n",
        "\n",
        "    # Create indices\n",
        "    nodes = range(n)\n",
        "    edges = [(i, j) for i in nodes for j in nodes if i != j]\n",
        "\n",
        "    # Create optimization model\n",
        "    tsp = pulp.LpProblem(\"TSP\", pulp.LpMinimize)\n",
        "\n",
        "    # Decision variables\n",
        "    x = pulp.LpVariable.dicts(\"edge\",\n",
        "                             ((i, j) for i, j in edges),\n",
        "                             cat=\"Binary\")\n",
        "\n",
        "    # Dummy variables for subtour elimination\n",
        "    u = pulp.LpVariable.dicts(\"u\",\n",
        "                             ((i) for i in nodes),\n",
        "                             lowBound=0,\n",
        "                             upBound=n-1)\n",
        "\n",
        "    # Objective function\n",
        "    tsp += pulp.lpSum(distance_dict[stores[i]][stores[j]] * x[i,j]\n",
        "                      for i, j in edges)\n",
        "\n",
        "    # Constraints\n",
        "    # Each node must be entered once\n",
        "    for j in nodes:\n",
        "        tsp += pulp.lpSum(x[i,j] for i in nodes if i != j) == 1\n",
        "\n",
        "    # Each node must be exited once\n",
        "    for i in nodes:\n",
        "        tsp += pulp.lpSum(x[i,j] for j in nodes if i != j) == 1\n",
        "\n",
        "    # Subtour elimination\n",
        "    for i, j in edges:\n",
        "        if i != 0 and j != 0:\n",
        "            tsp += u[i] - u[j] + n * x[i,j] <= n - 1\n",
        "\n",
        "    # Solve the problem\n",
        "    tsp.solve(pulp.PULP_CBC_CMD(msg=False))\n",
        "\n",
        "    # Extract the solution\n",
        "    route = []\n",
        "    current = 0\n",
        "    for _ in range(n):\n",
        "        route.append(stores[current])\n",
        "        next_node = [j for j in nodes if j != current and x[current,j].value() == 1][0]\n",
        "        current = next_node\n",
        "    route.append(stores[0])\n",
        "\n",
        "    total_distance = sum(distance_dict[route[i]][route[i+1]]\n",
        "                        for i in range(len(route)-1))\n",
        "\n",
        "    return route, total_distance\n",
        "\n",
        "def main():\n",
        "    route, total_distance = solve_tsp_exact(distance)\n",
        "    print(\"\\nOptimal Solution:\")\n",
        "    print(\"Route:\", \" -> \".join(route))\n",
        "    print(f\"Total Distance: {total_distance:.1f} kilometers\")\n",
        "    return route, total_distance\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    optimal_route, optimal_distance = main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fA8PpXJNI8uX",
        "outputId": "a4118dea-08e9-4a14-a0a9-b790483d4997"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Optimal Solution:\n",
            "Route: S1  -> S13  -> S8  -> S9  -> S18  -> S20  -> S21  -> S19  -> S17  -> S11  -> S4  -> S7  -> S3  -> S14  -> S6  -> S12  -> S15  -> S10  -> S2  -> S16  -> S5  -> S1 \n",
            "Total Distance: 43.0 kilometers\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\"\"\"\n",
        "Problem Context - TSP with Fixed Start and End at Head Office (HO):\n",
        "\n",
        "This section focuses on finding the optimal route for the supervisor who must start\n",
        "from the Head Office (HO), visit all 21 showrooms exactly once, and return back to the HO.\n",
        "\n",
        "Objective:\n",
        "To compute the minimum total distance required for the supervisor to complete\n",
        "this round-trip, ensuring all showrooms are visited once and the route begins and ends at HO.\n",
        "\n",
        "This is a standard form of the Traveling Salesman Problem (TSP)\n",
        "with a fixed start and end point, and the goal is to minimize the total travel distance.\n",
        "\"\"\"\n",
        "\n",
        "import pulp\n",
        "import numpy as np\n",
        "\n",
        "def solve_tsp_exact_from_ho(distance_dict):\n",
        "    # Get locations including HO\n",
        "    locations = ['HO '] + [loc for loc in distance_dict.keys() if loc.startswith('S')]\n",
        "    n = len(locations)\n",
        "    nodes = range(n)\n",
        "    edges = [(i, j) for i in nodes for j in nodes if i != j]\n",
        "\n",
        "    # Create model\n",
        "    tsp = pulp.LpProblem(\"TSP_From_HO\", pulp.LpMinimize)\n",
        "\n",
        "    # Decision variables\n",
        "    x = pulp.LpVariable.dicts(\"edge\", edges, cat=\"Binary\")\n",
        "    u = pulp.LpVariable.dicts(\"u\", ((i) for i in nodes), lowBound=0, upBound=n-1)\n",
        "\n",
        "    # Objective: minimize total distance\n",
        "    tsp += pulp.lpSum(distance_dict[locations[i]][locations[j]] * x[i,j]\n",
        "                      for i, j in edges)\n",
        "\n",
        "    # Constraints\n",
        "    # Each node must be entered once\n",
        "    for j in nodes:\n",
        "        tsp += pulp.lpSum(x[i,j] for i in nodes if i != j) == 1\n",
        "\n",
        "    # Each node must be exited once\n",
        "    for i in nodes:\n",
        "        tsp += pulp.lpSum(x[i,j] for j in nodes if i != j) == 1\n",
        "\n",
        "    # Force start from HO (node 0)\n",
        "    tsp += u[0] == 0\n",
        "\n",
        "    # Subtour elimination (excluding HO)\n",
        "    for i, j in edges:\n",
        "        if i != 0 and j != 0:\n",
        "            tsp += u[i] - u[j] + n * x[i,j] <= n - 1\n",
        "\n",
        "    # Solve\n",
        "    tsp.solve(pulp.PULP_CBC_CMD(msg=False))\n",
        "\n",
        "    # Extract solution\n",
        "    route = []\n",
        "    current = 0  # Start from HO\n",
        "    for _ in range(n):\n",
        "        route.append(locations[current])\n",
        "        next_node = [j for j in nodes if j != current and x[current,j].value() == 1][0]\n",
        "        current = next_node\n",
        "\n",
        "    route.append(locations[0])  # Return to HO\n",
        "\n",
        "    total_distance = sum(distance_dict[route[i]][route[i+1]]\n",
        "                        for i in range(len(route)-1))\n",
        "\n",
        "    return route, total_distance\n",
        "\n",
        "def main():\n",
        "    route, total_distance = solve_tsp_exact_from_ho(distance)\n",
        "    print(\"\\nOptimal Solution:\")\n",
        "    print(\"Route:\", \" -> \".join(route))\n",
        "    print(f\"Total Distance: {total_distance:.1f} kilometers\")\n",
        "    return route, total_distance\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    optimal_route, optimal_distance = main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Wd_eNAPmVh21",
        "outputId": "caaa277e-bee8-47be-a3be-e8e804c21c44"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Optimal Solution:\n",
            "Route: HO  -> S12  -> S15  -> S10  -> S8  -> S9  -> S18  -> S20  -> S21  -> S19  -> S17  -> S13  -> S1  -> S7  -> S14  -> S3  -> S6  -> S2  -> S16  -> S5  -> S4  -> S11  -> HO \n",
            "Total Distance: 44.0 kilometers\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\"\"\"\n",
        "Distance Matrix Generation Using Coordinates:\n",
        "\n",
        "This section creates a pairwise distance matrix for all given locations — including 21 showrooms (S1–S21)\n",
        "and 3 warehouses (W1–W3) — based on their 2D Cartesian coordinates.\n",
        "\n",
        "Steps:\n",
        "1. Coordinates of all locations are defined in a NumPy array.\n",
        "2. Euclidean distances between each pair of locations are computed using `scipy.spatial.distance.cdist`.\n",
        "3. A distance matrix is constructed where each cell (i, j) represents the straight-line distance\n",
        "   between location i and location j.\n",
        "4. The matrix is converted into a labeled Pandas DataFrame for readability and ease of use.\n",
        "5. The final matrix is exported to an Excel file (`distance_matrix.xlsx`) for further analysis\n",
        "   in subsequent problem sections such as route optimization and cost calculations.\n",
        "\"\"\"\n",
        "\n",
        "import numpy as np\n",
        "from scipy.spatial.distance import cdist\n",
        "import pandas as pd\n",
        "\n",
        "# Extract the coordinates from the table\n",
        "coordinates = np.array([\n",
        "    [-3, -2], [-1, -5], [5, 6], [8, 2], [7, 11], [9, 14], [-3, 15], [-3, -6],\n",
        "    [4, 8], [4, -8], [2, -14], [6, -10], [-4, 8], [5, -12], [-5, -7], [-2, 5],\n",
        "    [2, 15], [7, 12], [3, -15], [8, -10], [-4, -15], [6, 15], [4, -20], [0, 0]\n",
        "])\n",
        "\n",
        "# Calculate the distance matrix using Euclidean distance\n",
        "distance_matrix = cdist(coordinates, coordinates, 'euclidean')\n",
        "\n",
        "# Create labels for rows and columns\n",
        "labels = ['S1', 'S2', 'S3', 'S4', 'S5', 'S6', 'S7', 'S8', 'S9', 'S10', 'S11', 'S12', 'S13', 'S14',\n",
        "          'S15', 'S16', 'S17', 'S18', 'S19', 'S20', 'S21', 'W1', 'W2', 'W3']\n",
        "\n",
        "# Create a Pandas DataFrame for easier Excel export\n",
        "df = pd.DataFrame(distance_matrix, index=labels, columns=labels)\n",
        "\n",
        "# Save the DataFrame to an Excel file\n",
        "df.to_excel(\"distance_matrix.xlsx\", index=True)"
      ],
      "metadata": {
        "id": "cXDUBZqrlP0F"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\"\"\"\n",
        "Data Input and Preprocessing for Problem 2 - Warehouse Assignment and Routing:\n",
        "\n",
        "This section reads and processes the order quantity data for the 21 stores from an Excel file (`table3.xlsx`),\n",
        "which contains distances between each location (stores and warehouses).\n",
        "\n",
        "Problem Context:\n",
        "From the store coordinates (as given in Table 2), geographic clusters of store locations can be identified.\n",
        "Each of the three warehouses (W1, W2, W3) will be assigned to serve one of these clusters.\n",
        "Once the cluster-to-warehouse mapping is done, the supervisor’s input (i.e., order quantities for the next day)\n",
        "can be used to determine:\n",
        "  - Number of trucks required (based on a capacity of 50 units per truck),\n",
        "  - Routing distance from warehouse to stores within the assigned cluster,\n",
        "  - Delivery costs (including fixed and variable components).\n",
        "\n",
        "Steps Performed in the Code:\n",
        "1. Reads the distance/order quantity data from the Excel file into a Pandas DataFrame.\n",
        "2. Renames the first column to 'To' for clarity and sets it as the index.\n",
        "3. Rounds all values in the DataFrame to one decimal place for uniformity.\n",
        "4. Converts the DataFrame to a nested dictionary structure for easy lookup\n",
        "   during further computation of distances, assignments, and routing costs.\n",
        "\"\"\"\n",
        "\n",
        "import pandas as pd\n",
        "\n",
        "# Read the CSV file into a DataFrame\n",
        "t3 = pd.read_excel('table3.xlsx')\n",
        "\n",
        "# Rename the first column header to `To`\n",
        "t3 = t3.rename(columns={'Unnamed: 0': 'To'})\n",
        "\n",
        "# Set first column `To` as the index\n",
        "t3 = t3.set_index('To')\n",
        "\n",
        "# Apply rounding to all values in the DataFrame\n",
        "t3 = t3.applymap(lambda x: round(x, 1))\n",
        "\n",
        "# Create a dictionary where keys are the column headers,\n",
        "# and values are dictionaries of the corresponding row values\n",
        "distance2 = t3.to_dict(orient='index')"
      ],
      "metadata": {
        "id": "kgNCu4MVYXr6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "41f91cb0-1f4e-4875-dc3d-23abe371c917"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-11-90caf795b1da>:36: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n",
            "  t3 = t3.applymap(lambda x: round(x, 1))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#run this code only if ortools library is not installed in your python platform\n",
        "!pip install ortools"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "us23pdZIvVzx",
        "outputId": "fcf8739c-1726-4d76-e077-a0d579f7751d"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting ortools\n",
            "  Downloading ortools-9.12.4544-cp311-cp311-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl.metadata (3.3 kB)\n",
            "Collecting absl-py>=2.0.0 (from ortools)\n",
            "  Downloading absl_py-2.2.2-py3-none-any.whl.metadata (2.6 kB)\n",
            "Requirement already satisfied: numpy>=1.13.3 in /usr/local/lib/python3.11/dist-packages (from ortools) (2.0.2)\n",
            "Requirement already satisfied: pandas>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from ortools) (2.2.2)\n",
            "Requirement already satisfied: protobuf<5.30,>=5.29.3 in /usr/local/lib/python3.11/dist-packages (from ortools) (5.29.4)\n",
            "Requirement already satisfied: immutabledict>=3.0.0 in /usr/local/lib/python3.11/dist-packages (from ortools) (4.2.1)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas>=2.0.0->ortools) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=2.0.0->ortools) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=2.0.0->ortools) (2025.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas>=2.0.0->ortools) (1.17.0)\n",
            "Downloading ortools-9.12.4544-cp311-cp311-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl (24.9 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.9/24.9 MB\u001b[0m \u001b[31m39.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading absl_py-2.2.2-py3-none-any.whl (135 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m135.6/135.6 kB\u001b[0m \u001b[31m8.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: absl-py, ortools\n",
            "  Attempting uninstall: absl-py\n",
            "    Found existing installation: absl-py 1.4.0\n",
            "    Uninstalling absl-py-1.4.0:\n",
            "      Successfully uninstalled absl-py-1.4.0\n",
            "Successfully installed absl-py-2.2.2 ortools-9.12.4544\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\"\"\"\n",
        "Vehicle Requirement Calculation for Warehouse W1 (Question 12):\n",
        "\n",
        "Problem Context:\n",
        "Using the store-to-warehouse assignments identified in Question 9,\n",
        "this section calculates how many delivery vehicles are needed at Warehouse W1\n",
        "to satisfy the demand for the assigned stores.\n",
        "\n",
        "Objective:\n",
        "To determine the minimum number of vehicles required at W1 such that:\n",
        "  - All assigned stores receive their next-day order quantities (as given in Table 2).\n",
        "  - Each vehicle has a fixed carrying capacity (typically 50 units).\n",
        "  - The goal is to minimize total cost, which involves minimizing the number of vehicles used\n",
        "    without compromising on delivery.\n",
        "\n",
        "Steps Performed in Code:\n",
        "1. Extract the list of stores assigned to W1 based on clustering or predefined assignment from Q9.\n",
        "2. Sum up the order quantities of those stores for the given day.\n",
        "3. Divide the total demand by the vehicle capacity to compute the minimum number of trucks required,\n",
        "   rounding up to ensure full coverage of demand.\n",
        "\"\"\"\n",
        "\n",
        "from ortools.constraint_solver import routing_enums_pb2\n",
        "from ortools.constraint_solver import pywrapcp\n",
        "import numpy as np\n",
        "\n",
        "def create_data_model():\n",
        "    \"\"\"Creates and stores data for the problem\"\"\"\n",
        "    data = {}\n",
        "\n",
        "    # Warehouse assignments\n",
        "    w1_locations = ['S5', 'S6', 'S7', 'S9', 'S17', 'S18']\n",
        "    w2_locations = ['S11', 'S12', 'S14', 'S19', 'S20', 'S21']\n",
        "    w3_locations = ['S1', 'S2', 'S3', 'S4', 'S8', 'S10', 'S13', 'S15', 'S16']\n",
        "\n",
        "    # Order quantities\n",
        "    demands = {\n",
        "        'S1': 9, 'S2': 20, 'S3': 20, 'S4': 23, 'S5': 23, 'S6': 26, 'S7': 30,\n",
        "        'S8': 12, 'S9': 20, 'S10': 23, 'S11': 14, 'S12': 26, 'S13': 8,\n",
        "        'S14': 10, 'S15': 19, 'S16': 11, 'S17': 9, 'S18': 10, 'S19': 14,\n",
        "        'S20': 16, 'S21': 5\n",
        "    }\n",
        "\n",
        "    # Process W1 locations\n",
        "    data['w1_locations'] = ['W1'] + [loc + ' ' for loc in w1_locations]\n",
        "    data['w1_demands'] = [0] + [demands[loc.strip()] for loc in w1_locations]\n",
        "\n",
        "    # Calculate total quantity for W1\n",
        "    data['total_quantity'] = sum(demands[loc.strip()] for loc in w1_locations)\n",
        "\n",
        "    # Create distance matrix for W1\n",
        "    n = len(data['w1_locations'])\n",
        "    distance_matrix = np.zeros((n, n))\n",
        "    for i, loc1 in enumerate(data['w1_locations']):\n",
        "        for j, loc2 in enumerate(data['w1_locations']):\n",
        "            distance_matrix[i][j] = distance2[loc1][loc2]\n",
        "\n",
        "    data['distance_matrix'] = distance_matrix\n",
        "    data['num_vehicles'] = 5\n",
        "    data['depot'] = 0\n",
        "    data['vehicle_capacity'] = 50\n",
        "\n",
        "    return data\n",
        "\n",
        "def get_solution_details(data, manager, routing, solution):\n",
        "    \"\"\"Calculates and returns the solution details\"\"\"\n",
        "    total_distance = 0\n",
        "    routes = []\n",
        "\n",
        "    for vehicle_id in range(data['num_vehicles']):\n",
        "        index = routing.Start(vehicle_id)\n",
        "        if not routing.IsVehicleUsed(solution, vehicle_id):\n",
        "            continue\n",
        "\n",
        "        route_distance = 0\n",
        "        route_load = 0\n",
        "        route = []\n",
        "\n",
        "        while not routing.IsEnd(index):\n",
        "            node_index = manager.IndexToNode(index)\n",
        "            route.append(node_index)\n",
        "            route_load += data['w1_demands'][node_index]\n",
        "            previous_index = index\n",
        "            index = solution.Value(routing.NextVar(index))\n",
        "            route_distance += data['distance_matrix'][manager.IndexToNode(previous_index)][manager.IndexToNode(index)]\n",
        "\n",
        "        routes.append({\n",
        "            'vehicle_id': vehicle_id,\n",
        "            'distance': route_distance,\n",
        "            'load': route_load,\n",
        "            'locations': [data['w1_locations'][i] for i in route]\n",
        "        })\n",
        "        total_distance += route_distance\n",
        "\n",
        "    # Calculate costs\n",
        "    fixed_cost = 5000 * len(routes)  # Rs. 5000 per truck used\n",
        "    variable_cost = 40 * total_distance  # Rs. 40 per kilometer\n",
        "    total_cost = fixed_cost + variable_cost\n",
        "\n",
        "    return {\n",
        "        'total_cost': total_cost,\n",
        "        'total_distance': total_distance,\n",
        "        'vehicles_used': len(routes),\n",
        "        'routes': routes\n",
        "    }\n",
        "\n",
        "def solve_vrp():\n",
        "    \"\"\"Solve the VRP problem\"\"\"\n",
        "    data = create_data_model()\n",
        "    manager = pywrapcp.RoutingIndexManager(\n",
        "        len(data['distance_matrix']),\n",
        "        data['num_vehicles'],\n",
        "        data['depot'])\n",
        "    routing = pywrapcp.RoutingModel(manager)\n",
        "\n",
        "    def distance_callback(from_index, to_index):\n",
        "        from_node = manager.IndexToNode(from_index)\n",
        "        to_node = manager.IndexToNode(to_index)\n",
        "        return data['distance_matrix'][from_node][to_node]\n",
        "\n",
        "    transit_callback_index = routing.RegisterTransitCallback(distance_callback)\n",
        "    routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)\n",
        "\n",
        "    def demand_callback(from_index):\n",
        "        from_node = manager.IndexToNode(from_index)\n",
        "        return data['w1_demands'][from_node]\n",
        "\n",
        "    demand_callback_index = routing.RegisterUnaryTransitCallback(demand_callback)\n",
        "    routing.AddDimensionWithVehicleCapacity(\n",
        "        demand_callback_index,\n",
        "        0,  # null capacity slack\n",
        "        [data['vehicle_capacity']] * data['num_vehicles'],  # vehicle maximum capacities\n",
        "        True,  # start cumul to zero\n",
        "        'Capacity')\n",
        "\n",
        "    # Set solution parameters\n",
        "    search_parameters = pywrapcp.DefaultRoutingSearchParameters()\n",
        "    search_parameters.first_solution_strategy = (\n",
        "        routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC)\n",
        "    search_parameters.local_search_metaheuristic = (\n",
        "        routing_enums_pb2.LocalSearchMetaheuristic.GUIDED_LOCAL_SEARCH)\n",
        "    search_parameters.time_limit.FromSeconds(30)\n",
        "\n",
        "    # Solve the problem\n",
        "    solution = routing.SolveWithParameters(search_parameters)\n",
        "\n",
        "    if solution:\n",
        "        results = get_solution_details(data, manager, routing, solution)\n",
        "        results['total_quantity'] = data['total_quantity']\n",
        "        return results\n",
        "    return None\n",
        "\n",
        "# Run the solver and get results\n",
        "results = solve_vrp()\n",
        "if results:\n",
        "    print(\"\\nWarehouse 1 (W1) Delivery Solution:\")\n",
        "    print(\"=\" * 40)\n",
        "    print(f\"Total quantity to be shipped: {results['total_quantity']} units\")\n",
        "    print(f\"Total cost: Rs. {results['total_cost']:.2f}\")\n",
        "    print(f\"Number of trucks required: {results['vehicles_used']}\")\n",
        "    print(f\"Total distance traveled: {results['total_distance']:.2f} km\")\n",
        "\n",
        "    print(\"\\nDetailed Route Information:\")\n",
        "    print(\"=\" * 40)\n",
        "    for route in results['routes']:\n",
        "        print(f\"\\nTruck {route['vehicle_id'] + 1}:\")\n",
        "        print(f\"Load: {route['load']} units\")\n",
        "        print(f\"Distance: {route['distance']:.2f} km\")\n",
        "        print(\"Route:\", ' -> '.join(loc.strip() for loc in route['locations']))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RyS3mX_2lH7L",
        "outputId": "790aae45-42bc-4c2b-e3c9-4d6631bf2d89"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Warehouse 1 (W1) Delivery Solution:\n",
            "========================================\n",
            "Total quantity to be shipped: 118 units\n",
            "Total cost: Rs. 17112.00\n",
            "Number of trucks required: 3\n",
            "Total distance traveled: 52.80 km\n",
            "\n",
            "Detailed Route Information:\n",
            "========================================\n",
            "\n",
            "Truck 3:\n",
            "Load: 49 units\n",
            "Distance: 11.10 km\n",
            "Route: W1 -> S6 -> S5\n",
            "\n",
            "Truck 4:\n",
            "Load: 30 units\n",
            "Distance: 18.00 km\n",
            "Route: W1 -> S7\n",
            "\n",
            "Truck 5:\n",
            "Load: 39 units\n",
            "Distance: 23.70 km\n",
            "Route: W1 -> S18 -> S17 -> S9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\"\"\"\n",
        "Total Distance Traveled by Vehicles from Warehouse W2 (Question 13):\n",
        "\n",
        "Problem Context:\n",
        "Based on the warehouse-to-store assignments identified in Question 10,\n",
        "this section calculates the total distance traveled by all delivery vehicles\n",
        "starting from Warehouse W2 to meet the order quantities listed in Table 2.\n",
        "\n",
        "Objective:\n",
        "To determine the total delivery distance from W2, considering:\n",
        "  - Stores assigned to W2 as per clustering or previous assignment.\n",
        "  - Daily demand (order quantities) of each assigned store.\n",
        "  - Vehicle capacity constraint (e.g., 50 units per vehicle).\n",
        "  - Each vehicle starts and ends its trip at W2, covering a group of stores until capacity is met.\n",
        "  - The objective is to fulfill all orders while minimizing total travel distance and cost.\n",
        "\n",
        "Steps Performed in Code:\n",
        "1. Identify all stores assigned to Warehouse W2.\n",
        "2. Retrieve the order quantities for those stores from Table 2.\n",
        "3. Group store visits into routes based on vehicle capacity constraints.\n",
        "4. For each route, calculate the round-trip distance starting and ending at W2.\n",
        "5. Sum up the distances of all routes to obtain the total distance traveled by W2's delivery fleet.\n",
        "\"\"\"\n",
        "\n",
        "from ortools.constraint_solver import routing_enums_pb2\n",
        "from ortools.constraint_solver import pywrapcp\n",
        "import numpy as np\n",
        "\n",
        "def create_data_model():\n",
        "    \"\"\"Creates and stores data for the problem\"\"\"\n",
        "    data = {}\n",
        "\n",
        "    # Warehouse assignments\n",
        "    w1_locations = ['S5', 'S6', 'S7', 'S9', 'S17', 'S18']\n",
        "    w2_locations = ['S11', 'S12', 'S14', 'S19', 'S20', 'S21']\n",
        "    w3_locations = ['S1', 'S2', 'S3', 'S4', 'S8', 'S10', 'S13', 'S15', 'S16']\n",
        "\n",
        "    # Order quantities\n",
        "    demands = {\n",
        "        'S1': 9, 'S2': 20, 'S3': 20, 'S4': 23, 'S5': 23, 'S6': 26, 'S7': 30,\n",
        "        'S8': 12, 'S9': 20, 'S10': 23, 'S11': 14, 'S12': 26, 'S13': 8,\n",
        "        'S14': 10, 'S15': 19, 'S16': 11, 'S17': 9, 'S18': 10, 'S19': 14,\n",
        "        'S20': 16, 'S21': 5\n",
        "    }\n",
        "\n",
        "    # Process W2 locations\n",
        "    data['w2_locations'] = ['W2'] + [loc + ' ' for loc in w2_locations]\n",
        "    data['w2_demands'] = [0] + [demands[loc.strip()] for loc in w2_locations]\n",
        "\n",
        "    # Calculate total quantity for W2\n",
        "    data['total_quantity'] = sum(demands[loc.strip()] for loc in w2_locations)\n",
        "\n",
        "    # Create distance matrix for W2\n",
        "    n = len(data['w2_locations'])\n",
        "    distance_matrix = np.zeros((n, n))\n",
        "    for i, loc1 in enumerate(data['w2_locations']):\n",
        "        for j, loc2 in enumerate(data['w2_locations']):\n",
        "            distance_matrix[i][j] = distance2[loc1][loc2]\n",
        "\n",
        "    data['distance_matrix'] = distance_matrix\n",
        "    data['num_vehicles'] = 5\n",
        "    data['depot'] = 0\n",
        "    data['vehicle_capacity'] = 50\n",
        "\n",
        "    return data\n",
        "\n",
        "def get_solution_details(data, manager, routing, solution):\n",
        "    \"\"\"Calculates and returns the solution details\"\"\"\n",
        "    total_distance = 0\n",
        "    routes = []\n",
        "\n",
        "    for vehicle_id in range(data['num_vehicles']):\n",
        "        index = routing.Start(vehicle_id)\n",
        "        if not routing.IsVehicleUsed(solution, vehicle_id):\n",
        "            continue\n",
        "\n",
        "        route_distance = 0\n",
        "        route_load = 0\n",
        "        route = []\n",
        "\n",
        "        while not routing.IsEnd(index):\n",
        "            node_index = manager.IndexToNode(index)\n",
        "            route.append(node_index)\n",
        "            route_load += data['w2_demands'][node_index]\n",
        "            previous_index = index\n",
        "            index = solution.Value(routing.NextVar(index))\n",
        "            route_distance += data['distance_matrix'][manager.IndexToNode(previous_index)][manager.IndexToNode(index)]\n",
        "\n",
        "        routes.append({\n",
        "            'vehicle_id': vehicle_id,\n",
        "            'distance': route_distance,\n",
        "            'load': route_load,\n",
        "            'locations': [data['w2_locations'][i] for i in route]\n",
        "        })\n",
        "        total_distance += route_distance\n",
        "\n",
        "    # Calculate costs\n",
        "    fixed_cost = 5000 * len(routes)  # Rs. 5000 per truck used\n",
        "    variable_cost = 40 * total_distance  # Rs. 40 per kilometer\n",
        "    total_cost = fixed_cost + variable_cost\n",
        "\n",
        "    return {\n",
        "        'total_cost': total_cost,\n",
        "        'total_distance': total_distance,\n",
        "        'vehicles_used': len(routes),\n",
        "        'routes': routes\n",
        "    }\n",
        "\n",
        "def solve_vrp_w2():\n",
        "    \"\"\"Solve the VRP problem for Warehouse 2\"\"\"\n",
        "    data = create_data_model()\n",
        "    manager = pywrapcp.RoutingIndexManager(\n",
        "        len(data['distance_matrix']),\n",
        "        data['num_vehicles'],\n",
        "        data['depot'])\n",
        "    routing = pywrapcp.RoutingModel(manager)\n",
        "\n",
        "    def distance_callback(from_index, to_index):\n",
        "        from_node = manager.IndexToNode(from_index)\n",
        "        to_node = manager.IndexToNode(to_index)\n",
        "        return data['distance_matrix'][from_node][to_node]\n",
        "\n",
        "    transit_callback_index = routing.RegisterTransitCallback(distance_callback)\n",
        "    routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)\n",
        "\n",
        "    def demand_callback(from_index):\n",
        "        from_node = manager.IndexToNode(from_index)\n",
        "        return data['w2_demands'][from_node]\n",
        "\n",
        "    demand_callback_index = routing.RegisterUnaryTransitCallback(demand_callback)\n",
        "    routing.AddDimensionWithVehicleCapacity(\n",
        "        demand_callback_index,\n",
        "        0,  # null capacity slack\n",
        "        [data['vehicle_capacity']] * data['num_vehicles'],  # vehicle maximum capacities\n",
        "        True,  # start cumul to zero\n",
        "        'Capacity')\n",
        "\n",
        "    # Set solution parameters\n",
        "    search_parameters = pywrapcp.DefaultRoutingSearchParameters()\n",
        "    search_parameters.first_solution_strategy = (\n",
        "        routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC)\n",
        "    search_parameters.local_search_metaheuristic = (\n",
        "        routing_enums_pb2.LocalSearchMetaheuristic.GUIDED_LOCAL_SEARCH)\n",
        "    search_parameters.time_limit.FromSeconds(30)\n",
        "\n",
        "    # Solve the problem\n",
        "    solution = routing.SolveWithParameters(search_parameters)\n",
        "\n",
        "    if solution:\n",
        "        results = get_solution_details(data, manager, routing, solution)\n",
        "        results['total_quantity'] = data['total_quantity']\n",
        "        return results\n",
        "    return None\n",
        "\n",
        "# Run the solver and get results for Warehouse 2\n",
        "results = solve_vrp_w2()\n",
        "if results:\n",
        "    print(\"\\nWarehouse 2 (W2) Delivery Solution:\")\n",
        "    print(\"=\" * 40)\n",
        "    print(f\"Total quantity to be shipped: {results['total_quantity']} units\")\n",
        "    print(f\"Total cost: Rs. {results['total_cost']:.2f}\")\n",
        "    print(f\"Number of trucks required: {results['vehicles_used']}\")\n",
        "    print(f\"Total distance traveled: {results['total_distance']:.2f} km\")\n",
        "\n",
        "    print(\"\\nDetailed Route Information:\")\n",
        "    print(\"=\" * 40)\n",
        "    for route in results['routes']:\n",
        "        print(f\"\\nTruck {route['vehicle_id'] + 1}:\")\n",
        "        print(f\"Load: {route['load']} units\")\n",
        "        print(f\"Distance: {route['distance']:.2f} km\")\n",
        "        print(\"Route:\", ' -> '.join(loc.strip() for loc in route['locations']))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1hdd91br1JBF",
        "outputId": "5a948adc-4689-4fbf-d3f3-d8c3d226ff87"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Warehouse 2 (W2) Delivery Solution:\n",
            "========================================\n",
            "Total quantity to be shipped: 85 units\n",
            "Total cost: Rs. 12548.00\n",
            "Number of trucks required: 2\n",
            "Total distance traveled: 63.70 km\n",
            "\n",
            "Detailed Route Information:\n",
            "========================================\n",
            "\n",
            "Truck 4:\n",
            "Load: 40 units\n",
            "Distance: 22.30 km\n",
            "Route: W2 -> S12 -> S11\n",
            "\n",
            "Truck 5:\n",
            "Load: 45 units\n",
            "Distance: 41.40 km\n",
            "Route: W2 -> S21 -> S20 -> S19 -> S14\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\"\"\"\n",
        "Total Delivery Cost Incurred at Warehouse W3 (Question 14):\n",
        "\n",
        "Problem Context:\n",
        "Based on the store assignments identified in Question 11, this section calculates\n",
        "the total cost incurred by Warehouse W3 to fulfill the demand of its assigned stores\n",
        "(as per Table 2 order quantities).\n",
        "\n",
        "Objective:\n",
        "To compute the total delivery cost while minimizing it, considering:\n",
        "  - Each store’s demand must be satisfied by W3.\n",
        "  - A fixed number of units (e.g., 50 units) can be carried by one vehicle.\n",
        "  - Each delivery route starts and ends at W3.\n",
        "  - Cost per delivery includes:\n",
        "      a) Fixed cost per vehicle/trip (e.g., ₹500),\n",
        "      b) Variable cost based on distance traveled (e.g., ₹10 per km).\n",
        "\n",
        "Steps Performed in Code:\n",
        "1. Identify the list of stores assigned to Warehouse W3.\n",
        "2. Extract each store’s order quantity from Table 2.\n",
        "3. Determine the number of vehicles needed based on the total demand and truck capacity.\n",
        "4. Formulate routes such that each truck's capacity is not exceeded.\n",
        "5. For each route:\n",
        "   - Calculate the total distance traveled (starting and ending at W3),\n",
        "   - Compute the cost as: (Fixed Cost + Distance × Cost per km).\n",
        "6. Sum up the cost for all routes to get the total cost incurred at W3.\n",
        "\"\"\"\n",
        "\n",
        "from ortools.constraint_solver import routing_enums_pb2\n",
        "from ortools.constraint_solver import pywrapcp\n",
        "import numpy as np\n",
        "\n",
        "def create_data_model():\n",
        "    \"\"\"Creates and stores data for the problem\"\"\"\n",
        "    data = {}\n",
        "\n",
        "    # Warehouse assignments\n",
        "    w1_locations = ['S5', 'S6', 'S7', 'S9', 'S17', 'S18']\n",
        "    w2_locations = ['S11', 'S12', 'S14', 'S19', 'S20', 'S21']\n",
        "    w3_locations = ['S1', 'S2', 'S3', 'S4', 'S8', 'S10', 'S13', 'S15', 'S16']\n",
        "\n",
        "    # Order quantities\n",
        "    demands = {\n",
        "        'S1': 9, 'S2': 20, 'S3': 20, 'S4': 23, 'S5': 23, 'S6': 26, 'S7': 30,\n",
        "        'S8': 12, 'S9': 20, 'S10': 23, 'S11': 14, 'S12': 26, 'S13': 8,\n",
        "        'S14': 10, 'S15': 19, 'S16': 11, 'S17': 9, 'S18': 10, 'S19': 14,\n",
        "        'S20': 16, 'S21': 5\n",
        "    }\n",
        "\n",
        "    # Process W3 locations\n",
        "    data['w3_locations'] = ['W3'] + [loc + ' ' for loc in w3_locations]\n",
        "    data['w3_demands'] = [0] + [demands[loc.strip()] for loc in w3_locations]\n",
        "\n",
        "    # Calculate total quantity for W3\n",
        "    data['total_quantity'] = sum(demands[loc.strip()] for loc in w3_locations)\n",
        "\n",
        "    # Create distance matrix for W3\n",
        "    n = len(data['w3_locations'])\n",
        "    distance_matrix = np.zeros((n, n))\n",
        "    for i, loc1 in enumerate(data['w3_locations']):\n",
        "        for j, loc2 in enumerate(data['w3_locations']):\n",
        "            distance_matrix[i][j] = distance2[loc1][loc2]\n",
        "\n",
        "    data['distance_matrix'] = distance_matrix\n",
        "    data['num_vehicles'] = 5\n",
        "    data['depot'] = 0\n",
        "    data['vehicle_capacity'] = 50\n",
        "\n",
        "    return data\n",
        "\n",
        "def get_solution_details(data, manager, routing, solution):\n",
        "    \"\"\"Calculates and returns the solution details\"\"\"\n",
        "    total_distance = 0\n",
        "    routes = []\n",
        "\n",
        "    for vehicle_id in range(data['num_vehicles']):\n",
        "        index = routing.Start(vehicle_id)\n",
        "        if not routing.IsVehicleUsed(solution, vehicle_id):\n",
        "            continue\n",
        "\n",
        "        route_distance = 0\n",
        "        route_load = 0\n",
        "        route = []\n",
        "\n",
        "        while not routing.IsEnd(index):\n",
        "            node_index = manager.IndexToNode(index)\n",
        "            route.append(node_index)\n",
        "            route_load += data['w3_demands'][node_index]\n",
        "            previous_index = index\n",
        "            index = solution.Value(routing.NextVar(index))\n",
        "            route_distance += data['distance_matrix'][manager.IndexToNode(previous_index)][manager.IndexToNode(index)]\n",
        "\n",
        "        routes.append({\n",
        "            'vehicle_id': vehicle_id,\n",
        "            'distance': route_distance,\n",
        "            'load': route_load,\n",
        "            'locations': [data['w3_locations'][i] for i in route]\n",
        "        })\n",
        "        total_distance += route_distance\n",
        "\n",
        "    # Calculate costs\n",
        "    fixed_cost = 5000 * len(routes)  # Rs. 5000 per truck used\n",
        "    variable_cost = 40 * total_distance  # Rs. 40 per kilometer\n",
        "    total_cost = fixed_cost + variable_cost\n",
        "\n",
        "    return {\n",
        "        'total_cost': total_cost,\n",
        "        'total_distance': total_distance,\n",
        "        'vehicles_used': len(routes),\n",
        "        'routes': routes\n",
        "    }\n",
        "\n",
        "def solve_vrp_w3():\n",
        "    \"\"\"Solve the VRP problem for Warehouse 3\"\"\"\n",
        "    data = create_data_model()\n",
        "    manager = pywrapcp.RoutingIndexManager(\n",
        "        len(data['distance_matrix']),\n",
        "        data['num_vehicles'],\n",
        "        data['depot'])\n",
        "    routing = pywrapcp.RoutingModel(manager)\n",
        "\n",
        "    def distance_callback(from_index, to_index):\n",
        "        from_node = manager.IndexToNode(from_index)\n",
        "        to_node = manager.IndexToNode(to_index)\n",
        "        return data['distance_matrix'][from_node][to_node]\n",
        "\n",
        "    transit_callback_index = routing.RegisterTransitCallback(distance_callback)\n",
        "    routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)\n",
        "\n",
        "    def demand_callback(from_index):\n",
        "        from_node = manager.IndexToNode(from_index)\n",
        "        return data['w3_demands'][from_node]\n",
        "\n",
        "    demand_callback_index = routing.RegisterUnaryTransitCallback(demand_callback)\n",
        "    routing.AddDimensionWithVehicleCapacity(\n",
        "        demand_callback_index,\n",
        "        0,  # null capacity slack\n",
        "        [data['vehicle_capacity']] * data['num_vehicles'],  # vehicle maximum capacities\n",
        "        True,  # start cumul to zero\n",
        "        'Capacity')\n",
        "\n",
        "    # Set solution parameters\n",
        "    search_parameters = pywrapcp.DefaultRoutingSearchParameters()\n",
        "    search_parameters.first_solution_strategy = (\n",
        "        routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC)\n",
        "    search_parameters.local_search_metaheuristic = (\n",
        "        routing_enums_pb2.LocalSearchMetaheuristic.GUIDED_LOCAL_SEARCH)\n",
        "    search_parameters.time_limit.FromSeconds(30)\n",
        "\n",
        "    # Solve the problem\n",
        "    solution = routing.SolveWithParameters(search_parameters)\n",
        "\n",
        "    if solution:\n",
        "        results = get_solution_details(data, manager, routing, solution)\n",
        "        results['total_quantity'] = data['total_quantity']\n",
        "        return results\n",
        "    return None\n",
        "\n",
        "# Run the solver and get results for Warehouse 3\n",
        "results = solve_vrp_w3()\n",
        "if results:\n",
        "    print(\"\\nWarehouse 3 (W3) Delivery Solution:\")\n",
        "    print(\"=\" * 40)\n",
        "    print(f\"Total quantity to be shipped: {results['total_quantity']} units\")\n",
        "    print(f\"Total cost: Rs. {results['total_cost']:.2f}\")\n",
        "    print(f\"Number of trucks required: {results['vehicles_used']}\")\n",
        "    print(f\"Total distance traveled: {results['total_distance']:.2f} km\")\n",
        "\n",
        "    print(\"\\nDetailed Route Information:\")\n",
        "    print(\"=\" * 40)\n",
        "    for route in results['routes']:\n",
        "        print(f\"\\nTruck {route['vehicle_id'] + 1}:\")\n",
        "        print(f\"Load: {route['load']} units\")\n",
        "        print(f\"Distance: {route['distance']:.2f} km\")\n",
        "        print(\"Route:\", ' -> '.join(loc.strip() for loc in route['locations']))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mp8E4rXj2WF2",
        "outputId": "f0d6dd47-9373-41dc-ce9b-2fa66acd848d"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Warehouse 3 (W3) Delivery Solution:\n",
            "========================================\n",
            "Total quantity to be shipped: 145 units\n",
            "Total cost: Rs. 19392.00\n",
            "Number of trucks required: 3\n",
            "Total distance traveled: 109.80 km\n",
            "\n",
            "Detailed Route Information:\n",
            "========================================\n",
            "\n",
            "Truck 3:\n",
            "Load: 49 units\n",
            "Distance: 27.90 km\n",
            "Route: W3 -> S3 -> S2 -> S1\n",
            "\n",
            "Truck 4:\n",
            "Load: 46 units\n",
            "Distance: 28.10 km\n",
            "Route: W3 -> S10 -> S4\n",
            "\n",
            "Truck 5:\n",
            "Load: 50 units\n",
            "Distance: 53.80 km\n",
            "Route: W3 -> S16 -> S15 -> S13 -> S8\n"
          ]
        }
      ]
    }
  ]
}
